package bg.softuni.fundamentals.Lists;


import java.util.*;
import java.util.stream.Collectors;

public class Demo {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Integer> numbers = Arrays.stream(scanner.nextLine().split("\\s+"))
                .map(Integer::parseInt).collect(Collectors.toList());

        String input = scanner.nextLine();
        while (!input.equals("end")) {
            String[] tokens = input.split("\\s+");
            Integer num = Integer.valueOf(tokens[1]);
            String commmand = tokens[0];
            if (commmand.equals("Delete")) {
                for (int i = 0; i < numbers.size(); i++) {
                    numbers.remove((Integer) Integer.parseInt(tokens[1]));

                }
            } else if (commmand.equals("Insert")) {
                int position = Integer.parseInt(tokens[2]);
                if (position >= 0 && position < numbers.size()) {

                    numbers.add(Integer.parseInt(tokens[2]), num);
                }
            }
            input = scanner.nextLine();
        }

        for (Integer number : numbers) {
            System.out.print(number + " ");
        }
    }


    //List<Integer> numbers = Arrays.stream(scanner.nextLine().split("\\s+"))
    //                .map(Integer::parseInt).collect(Collectors.toList());


    private static List<Integer> parseLineOfNumbers(Scanner scanner) {
        String line = scanner.nextLine();
        String[] numbersAsStrings = line.split(" ");

        List<Integer> numbers = new ArrayList<>();

        for (String s : numbersAsStrings) {
            int number = Integer.parseInt(s);
            numbers.add(number);
        }
        return numbers;
    }

    private static List<Double> parseDoubleList(Scanner scanner) {
        String[] input = scanner.nextLine().split(" ");
        List<Double> nums = new ArrayList<>();

        for (int i = 0; i < input.length; i++) {
            double num = Double.parseDouble(input[i]);
            nums.add(num);

        }
        return nums;
    }
}
